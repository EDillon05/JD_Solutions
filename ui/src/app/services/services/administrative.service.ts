/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AdministrativeResponse } from '../models/administrative-response';
import { deleteById6 } from '../fn/administrative/delete-by-id-6';
import { DeleteById6$Params } from '../fn/administrative/delete-by-id-6';
import { findAllByOwner6 } from '../fn/administrative/find-all-by-owner-6';
import { FindAllByOwner6$Params } from '../fn/administrative/find-all-by-owner-6';
import { findById7 } from '../fn/administrative/find-by-id-7';
import { FindById7$Params } from '../fn/administrative/find-by-id-7';
import { PageResponseAdministrativeResponse } from '../models/page-response-administrative-response';
import { save6 } from '../fn/administrative/save-6';
import { Save6$Params } from '../fn/administrative/save-6';
import { searchByFilters6 } from '../fn/administrative/search-by-filters-6';
import { SearchByFilters6$Params } from '../fn/administrative/search-by-filters-6';
import { update7 } from '../fn/administrative/update-7';
import { Update7$Params } from '../fn/administrative/update-7';
import { uploadFile6 } from '../fn/administrative/upload-file-6';
import { UploadFile6$Params } from '../fn/administrative/upload-file-6';


/**
 * General Info API
 */
@Injectable({ providedIn: 'root' })
export class AdministrativeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `update7()` */
  static readonly Update7Path = '/administrative';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update7()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update7$Response(params: Update7$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return update7(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update7$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update7(params: Update7$Params, context?: HttpContext): Observable<void> {
    return this.update7$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `save6()` */
  static readonly Save6Path = '/administrative';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save6()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save6$Response(params: Save6$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save6(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save6$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save6(params: Save6$Params, context?: HttpContext): Observable<number> {
    return this.save6$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadFile6()` */
  static readonly UploadFile6Path = '/administrative/upload/{cv-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadFile6()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile6$Response(params: UploadFile6$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return uploadFile6(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadFile6$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile6(params: UploadFile6$Params, context?: HttpContext): Observable<string> {
    return this.uploadFile6$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `findById7()` */
  static readonly FindById7Path = '/administrative/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById7()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById7$Response(params: FindById7$Params, context?: HttpContext): Observable<StrictHttpResponse<AdministrativeResponse>> {
    return findById7(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById7$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById7(params: FindById7$Params, context?: HttpContext): Observable<AdministrativeResponse> {
    return this.findById7$Response(params, context).pipe(
      map((r: StrictHttpResponse<AdministrativeResponse>): AdministrativeResponse => r.body)
    );
  }

  /** Path part for operation `deleteById6()` */
  static readonly DeleteById6Path = '/administrative/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteById6()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById6$Response(params: DeleteById6$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteById6(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteById6$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById6(params: DeleteById6$Params, context?: HttpContext): Observable<void> {
    return this.deleteById6$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchByFilters6()` */
  static readonly SearchByFilters6Path = '/administrative/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchByFilters6()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters6$Response(params?: SearchByFilters6$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseAdministrativeResponse>> {
    return searchByFilters6(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchByFilters6$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters6(params?: SearchByFilters6$Params, context?: HttpContext): Observable<PageResponseAdministrativeResponse> {
    return this.searchByFilters6$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseAdministrativeResponse>): PageResponseAdministrativeResponse => r.body)
    );
  }

  /** Path part for operation `findAllByOwner6()` */
  static readonly FindAllByOwner6Path = '/administrative/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllByOwner6()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner6$Response(params?: FindAllByOwner6$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseAdministrativeResponse>> {
    return findAllByOwner6(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllByOwner6$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner6(params?: FindAllByOwner6$Params, context?: HttpContext): Observable<PageResponseAdministrativeResponse> {
    return this.findAllByOwner6$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseAdministrativeResponse>): PageResponseAdministrativeResponse => r.body)
    );
  }

}
