/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CareerResponse } from '../models/career-response';
import { deleteById5 } from '../fn/career/delete-by-id-5';
import { DeleteById5$Params } from '../fn/career/delete-by-id-5';
import { findAllByOwner5 } from '../fn/career/find-all-by-owner-5';
import { FindAllByOwner5$Params } from '../fn/career/find-all-by-owner-5';
import { findById5 } from '../fn/career/find-by-id-5';
import { FindById5$Params } from '../fn/career/find-by-id-5';
import { PageResponseCareerResponse } from '../models/page-response-career-response';
import { save5 } from '../fn/career/save-5';
import { Save5$Params } from '../fn/career/save-5';
import { searchByFilters5 } from '../fn/career/search-by-filters-5';
import { SearchByFilters5$Params } from '../fn/career/search-by-filters-5';
import { update6 } from '../fn/career/update-6';
import { Update6$Params } from '../fn/career/update-6';
import { uploadFile5 } from '../fn/career/upload-file-5';
import { UploadFile5$Params } from '../fn/career/upload-file-5';


/**
 * General Info API
 */
@Injectable({ providedIn: 'root' })
export class CareerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `update6()` */
  static readonly Update6Path = '/careers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update6()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update6$Response(params: Update6$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return update6(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update6$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update6(params: Update6$Params, context?: HttpContext): Observable<void> {
    return this.update6$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `save5()` */
  static readonly Save5Path = '/careers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save5()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save5$Response(params: Save5$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save5$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save5(params: Save5$Params, context?: HttpContext): Observable<number> {
    return this.save5$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadFile5()` */
  static readonly UploadFile5Path = '/careers/upload/{cv-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadFile5()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile5$Response(params: UploadFile5$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return uploadFile5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadFile5$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile5(params: UploadFile5$Params, context?: HttpContext): Observable<string> {
    return this.uploadFile5$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `findById5()` */
  static readonly FindById5Path = '/careers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById5()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById5$Response(params: FindById5$Params, context?: HttpContext): Observable<StrictHttpResponse<CareerResponse>> {
    return findById5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById5(params: FindById5$Params, context?: HttpContext): Observable<CareerResponse> {
    return this.findById5$Response(params, context).pipe(
      map((r: StrictHttpResponse<CareerResponse>): CareerResponse => r.body)
    );
  }

  /** Path part for operation `deleteById5()` */
  static readonly DeleteById5Path = '/careers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteById5()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById5$Response(params: DeleteById5$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteById5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteById5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById5(params: DeleteById5$Params, context?: HttpContext): Observable<void> {
    return this.deleteById5$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchByFilters5()` */
  static readonly SearchByFilters5Path = '/careers/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchByFilters5()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters5$Response(params?: SearchByFilters5$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCareerResponse>> {
    return searchByFilters5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchByFilters5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters5(params?: SearchByFilters5$Params, context?: HttpContext): Observable<PageResponseCareerResponse> {
    return this.searchByFilters5$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCareerResponse>): PageResponseCareerResponse => r.body)
    );
  }

  /** Path part for operation `findAllByOwner5()` */
  static readonly FindAllByOwner5Path = '/careers/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllByOwner5()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner5$Response(params?: FindAllByOwner5$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCareerResponse>> {
    return findAllByOwner5(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllByOwner5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner5(params?: FindAllByOwner5$Params, context?: HttpContext): Observable<PageResponseCareerResponse> {
    return this.findAllByOwner5$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCareerResponse>): PageResponseCareerResponse => r.body)
    );
  }

}
