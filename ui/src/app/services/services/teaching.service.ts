/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteById } from '../fn/teaching/delete-by-id';
import { DeleteById$Params } from '../fn/teaching/delete-by-id';
import { findAllByOwner } from '../fn/teaching/find-all-by-owner';
import { FindAllByOwner$Params } from '../fn/teaching/find-all-by-owner';
import { findById } from '../fn/teaching/find-by-id';
import { FindById$Params } from '../fn/teaching/find-by-id';
import { PageResponseTeachingResponse } from '../models/page-response-teaching-response';
import { save } from '../fn/teaching/save';
import { Save$Params } from '../fn/teaching/save';
import { searchByFilters } from '../fn/teaching/search-by-filters';
import { SearchByFilters$Params } from '../fn/teaching/search-by-filters';
import { TeachingResponse } from '../models/teaching-response';
import { update } from '../fn/teaching/update';
import { Update$Params } from '../fn/teaching/update';
import { uploadFile } from '../fn/teaching/upload-file';
import { UploadFile$Params } from '../fn/teaching/upload-file';


/**
 * General Info API
 */
@Injectable({ providedIn: 'root' })
export class TeachingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `update()` */
  static readonly UpdatePath = '/teaching';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update$Response(params: Update$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return update(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update(params: Update$Params, context?: HttpContext): Observable<void> {
    return this.update$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `save()` */
  static readonly SavePath = '/teaching';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save$Response(params: Save$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save(params: Save$Params, context?: HttpContext): Observable<number> {
    return this.save$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadFile()` */
  static readonly UploadFilePath = '/teaching/upload/{cv-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadFile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile$Response(params: UploadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return uploadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadFile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile(params: UploadFile$Params, context?: HttpContext): Observable<string> {
    return this.uploadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `findById()` */
  static readonly FindByIdPath = '/teaching/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById$Response(params: FindById$Params, context?: HttpContext): Observable<StrictHttpResponse<TeachingResponse>> {
    return findById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById(params: FindById$Params, context?: HttpContext): Observable<TeachingResponse> {
    return this.findById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeachingResponse>): TeachingResponse => r.body)
    );
  }

  /** Path part for operation `deleteById()` */
  static readonly DeleteByIdPath = '/teaching/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById$Response(params: DeleteById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById(params: DeleteById$Params, context?: HttpContext): Observable<void> {
    return this.deleteById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchByFilters()` */
  static readonly SearchByFiltersPath = '/teaching/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchByFilters()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters$Response(params?: SearchByFilters$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTeachingResponse>> {
    return searchByFilters(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchByFilters$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters(params?: SearchByFilters$Params, context?: HttpContext): Observable<PageResponseTeachingResponse> {
    return this.searchByFilters$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTeachingResponse>): PageResponseTeachingResponse => r.body)
    );
  }

  /** Path part for operation `findAllByOwner()` */
  static readonly FindAllByOwnerPath = '/teaching/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner$Response(params?: FindAllByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTeachingResponse>> {
    return findAllByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner(params?: FindAllByOwner$Params, context?: HttpContext): Observable<PageResponseTeachingResponse> {
    return this.findAllByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTeachingResponse>): PageResponseTeachingResponse => r.body)
    );
  }

}
