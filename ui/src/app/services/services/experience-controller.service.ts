/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteById1 } from '../fn/experience-controller/delete-by-id-1';
import { DeleteById1$Params } from '../fn/experience-controller/delete-by-id-1';
import { ExperienceResponse } from '../models/experience-response';
import { findAllByOwner1 } from '../fn/experience-controller/find-all-by-owner-1';
import { FindAllByOwner1$Params } from '../fn/experience-controller/find-all-by-owner-1';
import { findById1 } from '../fn/experience-controller/find-by-id-1';
import { FindById1$Params } from '../fn/experience-controller/find-by-id-1';
import { PageResponseExperienceResponse } from '../models/page-response-experience-response';
import { save1 } from '../fn/experience-controller/save-1';
import { Save1$Params } from '../fn/experience-controller/save-1';
import { searchByFilters1 } from '../fn/experience-controller/search-by-filters-1';
import { SearchByFilters1$Params } from '../fn/experience-controller/search-by-filters-1';
import { update1 } from '../fn/experience-controller/update-1';
import { Update1$Params } from '../fn/experience-controller/update-1';

@Injectable({ providedIn: 'root' })
export class ExperienceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `update1()` */
  static readonly Update1Path = '/experiences';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update1$Response(params: Update1$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return update1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update1(params: Update1$Params, context?: HttpContext): Observable<number> {
    return this.update1$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `save1()` */
  static readonly Save1Path = '/experiences';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save1$Response(params: Save1$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save1(params: Save1$Params, context?: HttpContext): Observable<number> {
    return this.save1$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findById1()` */
  static readonly FindById1Path = '/experiences/{experience-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById1$Response(params: FindById1$Params, context?: HttpContext): Observable<StrictHttpResponse<ExperienceResponse>> {
    return findById1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById1(params: FindById1$Params, context?: HttpContext): Observable<ExperienceResponse> {
    return this.findById1$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExperienceResponse>): ExperienceResponse => r.body)
    );
  }

  /** Path part for operation `deleteById1()` */
  static readonly DeleteById1Path = '/experiences/{experience-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteById1()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById1$Response(params: DeleteById1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteById1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteById1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById1(params: DeleteById1$Params, context?: HttpContext): Observable<void> {
    return this.deleteById1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchByFilters1()` */
  static readonly SearchByFilters1Path = '/experiences/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchByFilters1()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters1$Response(params?: SearchByFilters1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseExperienceResponse>> {
    return searchByFilters1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchByFilters1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters1(params?: SearchByFilters1$Params, context?: HttpContext): Observable<PageResponseExperienceResponse> {
    return this.searchByFilters1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseExperienceResponse>): PageResponseExperienceResponse => r.body)
    );
  }

  /** Path part for operation `findAllByOwner1()` */
  static readonly FindAllByOwner1Path = '/experiences/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllByOwner1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner1$Response(params?: FindAllByOwner1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseExperienceResponse>> {
    return findAllByOwner1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllByOwner1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner1(params?: FindAllByOwner1$Params, context?: HttpContext): Observable<PageResponseExperienceResponse> {
    return this.findAllByOwner1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseExperienceResponse>): PageResponseExperienceResponse => r.body)
    );
  }

}
