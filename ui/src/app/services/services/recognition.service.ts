/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteById2 } from '../fn/recognition/delete-by-id-2';
import { DeleteById2$Params } from '../fn/recognition/delete-by-id-2';
import { findAllByOwner2 } from '../fn/recognition/find-all-by-owner-2';
import { FindAllByOwner2$Params } from '../fn/recognition/find-all-by-owner-2';
import { findById2 } from '../fn/recognition/find-by-id-2';
import { FindById2$Params } from '../fn/recognition/find-by-id-2';
import { PageResponseRecognitionResponse } from '../models/page-response-recognition-response';
import { RecognitionResponse } from '../models/recognition-response';
import { save2 } from '../fn/recognition/save-2';
import { Save2$Params } from '../fn/recognition/save-2';
import { searchByFilters2 } from '../fn/recognition/search-by-filters-2';
import { SearchByFilters2$Params } from '../fn/recognition/search-by-filters-2';
import { update2 } from '../fn/recognition/update-2';
import { Update2$Params } from '../fn/recognition/update-2';
import { uploadFile2 } from '../fn/recognition/upload-file-2';
import { UploadFile2$Params } from '../fn/recognition/upload-file-2';


/**
 * General Info API
 */
@Injectable({ providedIn: 'root' })
export class RecognitionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `update2()` */
  static readonly Update2Path = '/recognitions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update2$Response(params: Update2$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return update2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update2(params: Update2$Params, context?: HttpContext): Observable<void> {
    return this.update2$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `save2()` */
  static readonly Save2Path = '/recognitions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save2$Response(params: Save2$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save2(params: Save2$Params, context?: HttpContext): Observable<number> {
    return this.save2$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadFile2()` */
  static readonly UploadFile2Path = '/recognitions/upload/{cv-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadFile2()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile2$Response(params: UploadFile2$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return uploadFile2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadFile2$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile2(params: UploadFile2$Params, context?: HttpContext): Observable<string> {
    return this.uploadFile2$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `findById2()` */
  static readonly FindById2Path = '/recognitions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById2()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById2$Response(params: FindById2$Params, context?: HttpContext): Observable<StrictHttpResponse<RecognitionResponse>> {
    return findById2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById2(params: FindById2$Params, context?: HttpContext): Observable<RecognitionResponse> {
    return this.findById2$Response(params, context).pipe(
      map((r: StrictHttpResponse<RecognitionResponse>): RecognitionResponse => r.body)
    );
  }

  /** Path part for operation `deleteById2()` */
  static readonly DeleteById2Path = '/recognitions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteById2()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById2$Response(params: DeleteById2$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteById2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteById2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById2(params: DeleteById2$Params, context?: HttpContext): Observable<void> {
    return this.deleteById2$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchByFilters2()` */
  static readonly SearchByFilters2Path = '/recognitions/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchByFilters2()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters2$Response(params?: SearchByFilters2$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseRecognitionResponse>> {
    return searchByFilters2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchByFilters2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters2(params?: SearchByFilters2$Params, context?: HttpContext): Observable<PageResponseRecognitionResponse> {
    return this.searchByFilters2$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseRecognitionResponse>): PageResponseRecognitionResponse => r.body)
    );
  }

  /** Path part for operation `findAllByOwner2()` */
  static readonly FindAllByOwner2Path = '/recognitions/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllByOwner2()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner2$Response(params?: FindAllByOwner2$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseRecognitionResponse>> {
    return findAllByOwner2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllByOwner2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner2(params?: FindAllByOwner2$Params, context?: HttpContext): Observable<PageResponseRecognitionResponse> {
    return this.findAllByOwner2$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseRecognitionResponse>): PageResponseRecognitionResponse => r.body)
    );
  }

}
