/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteById3 } from '../fn/project/delete-by-id-3';
import { DeleteById3$Params } from '../fn/project/delete-by-id-3';
import { findAllByOwner3 } from '../fn/project/find-all-by-owner-3';
import { FindAllByOwner3$Params } from '../fn/project/find-all-by-owner-3';
import { findById3 } from '../fn/project/find-by-id-3';
import { FindById3$Params } from '../fn/project/find-by-id-3';
import { PageResponseProjectResponse } from '../models/page-response-project-response';
import { ProjectResponse } from '../models/project-response';
import { save3 } from '../fn/project/save-3';
import { Save3$Params } from '../fn/project/save-3';
import { searchByFilters3 } from '../fn/project/search-by-filters-3';
import { SearchByFilters3$Params } from '../fn/project/search-by-filters-3';
import { update3 } from '../fn/project/update-3';
import { Update3$Params } from '../fn/project/update-3';
import { uploadFile3 } from '../fn/project/upload-file-3';
import { UploadFile3$Params } from '../fn/project/upload-file-3';


/**
 * General Info API
 */
@Injectable({ providedIn: 'root' })
export class ProjectService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `update3()` */
  static readonly Update3Path = '/project';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update3$Response(params: Update3$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return update3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update3(params: Update3$Params, context?: HttpContext): Observable<void> {
    return this.update3$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `save3()` */
  static readonly Save3Path = '/project';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save3$Response(params: Save3$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return save3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  save3(params: Save3$Params, context?: HttpContext): Observable<number> {
    return this.save3$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadFile3()` */
  static readonly UploadFile3Path = '/project/upload/{cv-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadFile3()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile3$Response(params: UploadFile3$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return uploadFile3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadFile3$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile3(params: UploadFile3$Params, context?: HttpContext): Observable<string> {
    return this.uploadFile3$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `findById3()` */
  static readonly FindById3Path = '/project/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById3()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById3$Response(params: FindById3$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectResponse>> {
    return findById3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById3(params: FindById3$Params, context?: HttpContext): Observable<ProjectResponse> {
    return this.findById3$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectResponse>): ProjectResponse => r.body)
    );
  }

  /** Path part for operation `deleteById3()` */
  static readonly DeleteById3Path = '/project/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteById3()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById3$Response(params: DeleteById3$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteById3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteById3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById3(params: DeleteById3$Params, context?: HttpContext): Observable<void> {
    return this.deleteById3$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchByFilters3()` */
  static readonly SearchByFilters3Path = '/project/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchByFilters3()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters3$Response(params?: SearchByFilters3$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseProjectResponse>> {
    return searchByFilters3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchByFilters3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByFilters3(params?: SearchByFilters3$Params, context?: HttpContext): Observable<PageResponseProjectResponse> {
    return this.searchByFilters3$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseProjectResponse>): PageResponseProjectResponse => r.body)
    );
  }

  /** Path part for operation `findAllByOwner3()` */
  static readonly FindAllByOwner3Path = '/project/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllByOwner3()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner3$Response(params?: FindAllByOwner3$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseProjectResponse>> {
    return findAllByOwner3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllByOwner3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByOwner3(params?: FindAllByOwner3$Params, context?: HttpContext): Observable<PageResponseProjectResponse> {
    return this.findAllByOwner3$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseProjectResponse>): PageResponseProjectResponse => r.body)
    );
  }

}
